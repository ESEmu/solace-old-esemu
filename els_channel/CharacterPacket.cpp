#include "CharacterPacket.hpp"
#include "Constants.hpp"
#include "ItemDataProvider.hpp"

namespace els {

	namespace CharacterPacket {

		PacketBuilder playerDataAck(Player* player) { // 0x2A

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeInt(0)
				.writeByte(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsString(player->getName())
				.writeElsString(player->getIP())
				.writeShort(0x1FC5)
				.writeInt(player->getED())
				.writeByte(player->getLevel())
				.writeInt(Constants::expTable[player->getLevel()].second + player->getEXP()) // current TOTAL exp
				.writeInt(0)
				.writeInt(0)
				.writeInt(0)
				.writeLong(0)
				.writeInt(0x143FA)
				.writeInt(0)
				.writeInt(0)
				.writeByte(0)
				.writeShort(player->getSkillInv()->getRemainingSP()) // Current TOTAL SP??
				.writeInt(0)
				.writeInt(0)
				.writeElsString("2000-01-01 00:00:00")
				.writeInt(Constants::expTable[player->getLevel()].second) // total exp for this level
				.writeInt(Constants::expTable[player->getLevel() + 1].second) // total exp for next level
				.writeInt(0)
				.writeInt(player->getMaxHP())
				.writeInt(player->getBaseAttack())
				.writeInt(player->getBaseMagicAttack())
				.writeInt(player->getBaseDef())
				.writeInt(player->getBaseMagicDef())
				/*
				unsigned char packet[1957] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAD, 0x09, 0x00, 0x01, 0x00, 0x01, 0xB2, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA8, 0x09, 0x00, 0x02, 0x00, 0x01, 0xFC, 0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAE, 0x09, 0x00, 0x03, 0x00, 0x01, 0xB2, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA9, 0x09, 0x00, 0x04, 0x00, 0x01, 0xFC, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAF, 0x09, 0x00, 0x05, 0x00, 0x01, 0xB2, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAA, 0x09, 0x00, 0x06, 0x00, 0x01, 0xFC, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xB0, 0x09, 0x00, 0x07, 0x00, 0x01, 0xB2, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAB, 0x09, 0x00, 0x08, 0x00, 0x01, 0xFC, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAC, 0x09, 0x00, 0x09, 0x00, 0x02, 0x02, 0x3D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA7, 0x09, 0x00, 0x0A, 0x00, 0x01, 0xFC, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x13, 0x89, 0x01, 0x14, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x31, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x13, 0x89, 0x01, 0x14, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x12, 0xC0, 0x00, 0x00, 0x12, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x34, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x32, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x35, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA7, 0x09, 0x00, 0x0A, 0x00, 0x01, 0xFC, 0x56, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA8, 0x09, 0x00, 0x02, 0x00, 0x01, 0xFC, 0x57, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA9, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xA9, 0x09, 0x00, 0x04, 0x00, 0x01, 0xFC, 0x58, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAA, 0x09, 0x00, 0x06, 0x00, 0x01, 0xFC, 0x59, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAB, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAB, 0x09, 0x00, 0x08, 0x00, 0x01, 0xFC, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x36, 0x00, 0x2D, 0x00, 0x31, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x37, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAC, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAC, 0x09, 0x00, 0x09, 0x00, 0x02, 0x02, 0x3D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAD, 0x09, 0x00, 0x01, 0x00, 0x01, 0xB2, 0x06, 0x01, 0x00, 0x00, 0x00, 0x01, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAE, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAE, 0x09, 0x00, 0x03, 0x00, 0x01, 0xB2, 0x07, 0x01, 0x00, 0x00, 0x00, 0x01, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xAF, 0x09, 0x00, 0x05, 0x00, 0x01, 0xB2, 0x08, 0x01, 0x00, 0x00, 0x00, 0x01, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xE6, 0x38, 0xB0, 0x09, 0x00, 0x07, 0x00, 0x01, 0xB2, 0x09, 0x01, 0x00, 0x00, 0x00, 0x01, 0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x32, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x31, 0x00, 0x2D, 0x00, 0x30, 0x00, 0x31, 0x00, 0x20, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0x13, 0x89, 0x00, 0x14, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x13, 0x89, 0x01, 0x00, 0x14, 0x55, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
				pb.writeBytes(packet, 1957);
				*/
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeInt(player->getMap()) // map
				.writeByte(4) // spawnpoint?
				.writeByte(0)
				.writeByte(0)
				.writeByte(0);
				
			pb	
				.writeInt(0)
				.writeInt(0)
				.writeInt(0);
			/* // dungeons that we have pwned
			unsigned char packet[562] = { 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x33, 0x85, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x32, 0x00, 0x36, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x77, 0x00, 0x00, 0x75, 0x77, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x68, 0x9F, 0x08, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x39, 0x00, 0x3A, 0x00, 0x30, 0x00, 0x34, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x50, 0x9B, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x33, 0x00, 0x32, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8B, 0x00, 0x00, 0x75, 0x8B, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x01, 0x56, 0x5C, 0x06, 0x00, 0x00, 0x00, 0x26, 0x4A, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x34, 0x00, 0x20, 0x00, 0x20, 0x00, 0x38, 0x00, 0x3A, 0x00, 0x35, 0x00, 0x30, 0x00, 0x50, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x75, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x75, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x75, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x75, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x75, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
			pb.writeBytes(packet, 562);
				/*
				.writeInt(0) // counter
				.writeInt(0)
				.writeInt(0) // some counter for something
				*/
			pb.writeInt(0); //first 4 bytes of 562 above
				pb.writeInt(0); // added
				pb.writeInt(player->getInv()->getQuantity(9)); // equipped equips
				
			for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
				int uid = (*player->getInv()->getInventory(9))[i];
				if (uid == -1) continue;
				else {
					auto item = &player->getInv()->getInventory()->find(uid)->second;
					bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
					pb
						.writeInt(item->getPosition())
						.writeInt(0)
						.writeInt(item->getUniqueID())
						.writeByte(9)
						.writeShort(item->getPosition())
						.writeInt(item->getItemID());
					if (isDecorative) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(0)
						.writeShort(item->getEndurance())
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					if (isDecorative) {
						pb.writeInt(7);
					}
					else {
						pb.writeInt(0);
					}

					if (item->getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item->getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);

				}

			}
			
			// skill slots
			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0); // added
				
			pb
				.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills
				
			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}

			pb
				.writeInt(0)
				.writeInt(0)
				.writeByte(1)
				.writeByte(1)
				.writeByte(0)
				.writeInt(0x12C0) // max stamina
				.writeInt(0x12C0) // cur stamina
				.writeByte(0)
				.writeInt(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0)
				.writeLong(0)
				.writeLong(0)
				.writeByte(0)
				.writeInt(1) // dungeons
				.writeInt(0x7530)
				.writeInt(0x7530)
				.writeLong(0)
				.writeByte(0)
				.writeInt(-1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(2)
				.writeInt(-1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(0) // added
				.writeElsString(player->getCreationDate())
				.writeInt(player->getED())
				.writeElsString(player->getLastLogin());
			
			// slots, load this properly later
			pb
				.writeInt(0x0F);
				
			for (int i = 1; i <= 7; i++) {
				pb
					.writeInt(i)
					.writeInt(player->getInv()->getMaxSlots(i));
			}

			pb
				.writeInt(8)
				.writeInt(0x08)
				.writeInt(9)
				.writeInt(0x15)
				.writeInt(10)
				.writeInt(0x03)
				.writeInt(11)
				.writeInt(0x03)
				.writeInt(12)
				.writeInt(0x18)
				.writeInt(13)
				.writeInt(0)
				.writeInt(14)
				.writeInt(0x30)
				.writeInt(15)
				.writeInt(0x04);

				std::cout << player->getInv()->getQuantity(9);
				pb.writeInt(player->getInv()->getQuantity(9)); // equips

				// similar to 0x31.
				
				for (int i = 0; i < player->getInv()->getMaxSlots(9); i++) {
					int uid = (*player->getInv()->getInventory(9))[i];
					if (uid == -1) continue;
					else {
						auto item = &player->getInv()->getInventory()->find(uid)->second;
						bool isDecorative = ItemDataProvider::isDecorative(item->getItemID());
						pb
							.writeInt(0)
							.writeInt(item->getUniqueID())
							.writeInt(0)
							.writeInt(item->getUniqueID())
							.writeByte(9)
							.writeShort(item->getPosition())
							.writeInt(item->getItemID());

						if (isDecorative) {
							pb.writeByte(0);
						}
						else {
							pb.writeByte(1);
						}
						pb.writeInt(1); // quantity

						if (isDecorative) {
							pb.writeShort(0);
						}
						else {
							pb.writeShort(item->getEndurance());
						}

						pb
							.writeInt(0)
							.writeInt(0)
							.writeInt(0)
							.writeShort(1);

						if (isDecorative) {
							pb.writeShort(7);
						}
						else {
							pb.writeShort(0);
						}

						if (item->getExpiry() != "0000-00-00 00:00:00") {
							pb.writeElsString(item->getExpiry());
						}
						else {
							pb.writeInt(0);
						}

						pb.writeByte(0);

					}

				}

				
				pb
					.writeInt(0x10) // might be revival stones
					.writeInt(0)
					.writeElsString("2000-01-01 00:00:00")
					.writeInt(1);
				
				for (int i = 0; i < 8; i++) {
					int skillid = player->getSkillInv()->getEquippedSkills()[i];
					pb
						.writeShort(skillid)
						.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
				}

				pb	
					.writeShort(player->getSkillInv()->getRemainingSP()) // SP
					.writeShort(0);
				
				pb.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

				for (auto skill : *player->getSkillInv()->getSkillInventory()) {
					pb
						.writeShort(skill.first)
						.writeByte(skill.second)
						.writeByte(0);
				}

				pb
					.writeLong(0)
					.writeShort(1)
					.writeInt(3)
					.writeLong(0)
					.writeLong(0)
					.writeLong(0)
					.writeLong(0)
					.writeInt(0)
					.writeShort(0);
					
					pb.finishPacket(0x2A);

			return pb;

		}

		PacketBuilder unknown_0x2B(Player* player) { // seems to be quest data

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeInt(0)
				.writeInt(player->getPlayerID())

				.writeInt(1)
				.writeInt(0x2AF8)
				.writeShort(0)

				.writeInt(0)

				.writeInt(6)
				.writeInt(1)
				.writeInt(0x22EE)
				.writeInt(2)
				.writeInt(0x22FB)
				.writeInt(3)
				.writeInt(0x2305)
				.writeInt(4)
				.writeInt(0x77A0)
				.writeInt(5)
				.writeInt(0x77E3)
				.writeInt(6)
				.writeInt(0x77EE)

				.finishPacket(0x2B);


			return pb;

		}

		PacketBuilder unknown_0x2C() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x2C);

			return pb;

		}

		PacketBuilder unknown_0x2D(Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(0)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeInt(1)
				.writeInt(player->getMaxHP())
				.writeInt(0x7B0C)
				.writeInt(300)
				.writeInt(300) // mp??
				.writeInt(9)
				.writeInt(0)
				.writeInt(0)
				.writeShort(4); // size

			for (int i = 0; i < 4; i++) {
				pb
					.writeInt(i)
					.writeInt(0);
			}

			pb
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x2D);

			return pb;
		}

		PacketBuilder unknown_0x2E() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0x25)
				.writeLong(0)
				.writeLong(0)
				.writeByte(0)
				.writeShort(1)
				.writeByte(0)
				.writeInt(3)
				.writeLong(0)
				.writeLong(0)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.finishPacket(0x2E);

			return pb;

		}

		PacketBuilder unknown_0x29() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x29);

			return pb;
		}

		PacketBuilder unknown_0x136() {

			PacketBuilder pb;
			pb.finishPacket(0x136);

			return pb;

		}

		PacketBuilder unknown_0x2D8() {

			PacketBuilder pb;
			pb
				.writeByte(0)
				.writeInt(1)
				//.writeInt(0x0B)
				.writeInt(0x30E58)
				/*.writeInt(0x3115A)
				.writeInt(0x3115B)
				.writeInt(0x3115C)
				.writeInt(0x3115D)
				.writeInt(0x3115E)
				.writeInt(0x3115F)
				.writeInt(0x31164)
				.writeInt(0x31165)
				.writeInt(0x31178)
				.writeInt(0x31182)
				*/
				.finishPacket(0x2D8);

			return pb;

		}

		PacketBuilder unknown_0x223() {

			unsigned char packet[0x54A] = { 0x01, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x7E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x88, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x8A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x15, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x6C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x76, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x76, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x8A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x94, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x9E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xA8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xA8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xB2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xB2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xBC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x16, 0xBC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x9C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xB0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x27, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x8C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0xFA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x28, 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x29, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0xDA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2A, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x2A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x7A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x8E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x2B, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x70, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x7A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x7F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x8E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x93, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x98, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xA2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4E, 0xA2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x4F, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x32, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x34, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x39, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x3E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x75, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x1A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x2E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x2E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x42, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x4C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x56, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x60, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x77, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xF4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x88, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x88, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x89, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x89, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x4A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x5E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x6D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x7C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xC2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xCC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xD6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xD6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xEA, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x9C, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0x4A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x87, 0x4A, 0x00, 0x00, 0x00 };

			PacketBuilder pb;
			pb.writeBytes(packet, 0x54A).finishPacket(0x223);
			return pb;

		}

		PacketBuilder unknown_0x26F() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x26E);
			return pb;
		}

		PacketBuilder unknown_0xF5(int number) {

			PacketBuilder pb;
			pb
				.writeInt(number)
				.finishPacket(0xF5);
			return pb;
		}

		PacketBuilder unknown_0x1DB() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.finishPacket(0x1DB);
			return pb;

		}

		PacketBuilder unknown_0xF6(Player* player, int number) {

			PacketBuilder pb;
			pb
				.writeInt(number)
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(1)
				.writeInt(number)
				.writeInt(0)
				.writeShort(0)
				.finishPacket(0xF6);
			return pb;
		}

		PacketBuilder unknown_0x3A0() {

			PacketBuilder pb;
			pb
				.writeInt(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeLong(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(0x53930DA1)
				.writeInt(0)
				.writeInt(0x53930DA1)
				.finishPacket(0x39F);

			return pb;


		}




	}


}