#include "DungeonPacket.hpp"
#include "DungeonDataProvider.hpp"
#include "Config.hpp"
#include "Time.hpp"

namespace els {

	namespace DungeonPacket {

		PacketBuilder tutorialAck(std::string serial, int dID, Player* player) {

			PacketBuilder pb;
			pb
				.writeByte(0)
				.writeInt(1)
				.writeByte(0)
				.writeByte(2)
				.writeByte(1)
				.writeByte(0)
				.writeInt(0x21)
				.writeInt(0)
				.writeElsString("tutorial")
				.writeByte(3)
				.writeShort(0)
				.writeElsString(serial)
				.writeByte(4)
				.writeByte(1)
				.writeElsString(Config::serverIP)
				.writeShort(0x238D)
				.writeShort(0)
				.writeByte(0)
				.writeInt(-1)
				.writeByte(0)
				.writeShort(70)
				.writeShort(0x9C3E)
				.writeInt(0)
				.writeShort(0)
				.writeInt(dID) // dungeon ID
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(4)
				.writeShort(3)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(6)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeInt(0)
				.writeByte(0)
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsString(player->getName())
				.writeInt(0x0A) // ?
				.writeElsString(player->getIP())
				.writeShort(0)
				.writeElsString("192.168.1.3") // ???
				.writeShort(0)
				.writeLong(0)
				.writeLong(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeInt(0)
				.writeInt(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeByte(1)
				.writeInt(player->getMaxHP())
				.writeInt(0x26E)
				.writeInt(0x301)
				.writeInt(0xB0)
				.writeInt(0x7C);

			pb.writeInt(player->getInv()->getEquipped());

			int equipno = 1;
			
			for (auto item : *player->getInv()->getInventory()) {

				if (item.second.isEquipped()) {

					pb
						.writeInt(equipno)
						.writeInt(0)
						.writeInt(item.second.getUniqueID())
						.writeByte(9)
						.writeShort(item.second.getPosition())
						.writeInt(item.second.getItemID());
					if (item.second.isDecorative()) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(1);

					if (item.second.getEndurance() == -1) {
						pb.writeShort(item.second.getEndurance());
					}
					else {
						pb.writeShort(item.second.getEndurance());
					}

					pb
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					if (item.second.isDecorative()) {
						pb.writeInt(7);
					}
					else {
						pb.writeInt(0x10000);
					}

					if (item.second.getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item.second.getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);
					equipno++;

				}

			}
			
			pb
				.writeInt(0);

			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}
			
			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0);
			pb
				.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}

			pb
				.writeLong(0)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);

			pb
				.writeByte(1)
				.writeByte(2)
				.writeShort(0x43FA)
				.writeInt(0)
				.writeInt(-1)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeZeroBytes(22)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeByte(0)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeZeroBytes(47);

			pb
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(80)
				.writeInt(0);

			pb
				.writeByte(2)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(40)
				.writeInt(0);

			pb
				.writeByte(3)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(84)
				.writeInt(0);

			pb.finishPacket(0x5E);

			return pb;

		}

		PacketBuilder tutorialStartAck() {
			
			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x8F);

			return pb;

		}

		PacketBuilder tutorialStartAck2(Player* player) {

			PacketBuilder pb;
			pb
				.writeByte(5)
				.writeInt(0)
				.writeInt(0x12C0) // stamina
				.writeInt(0)
				.writeShort(4)
				.writeShort(4)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(6)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeInt(0)
				.writeByte(0)
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsString(player->getName())
				.writeInt(0x0A) // ?
				.writeElsString(player->getIP())
				.writeShort(0)
				.writeElsString("192.168.1.3") // ???
				.writeShort(0)
				.writeLong(0)
				.writeLong(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeInt(0)
				.writeInt(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeByte(1)
				.writeInt(player->getMaxHP())
				.writeInt(0x26E)
				.writeInt(0x301)
				.writeInt(0xB0)
				.writeInt(0x7C);

			pb.writeInt(player->getInv()->getEquipped());

			int equipno = 1;
			
			for (auto item : *player->getInv()->getInventory()) {

				if (item.second.isEquipped()) {

					pb
						.writeInt(item.second.getPosition())
						.writeInt(0)
						.writeInt(item.second.getUniqueID())
						.writeByte(9)
						.writeShort(item.second.getPosition())
						.writeInt(item.second.getItemID());
					if (item.second.isDecorative()) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(1);

					if (item.second.getEndurance() == -1) {
						pb.writeShort(item.second.getEndurance());
					}
					else {
						pb.writeShort(item.second.getEndurance());
					}

					pb
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					if (item.second.isDecorative()) {
						pb.writeInt(7);
					}
					else {
						pb.writeInt(0x10000);
					}

					if (item.second.getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item.second.getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);
					equipno++;

				}

			}
			
			pb
				.writeInt(0);


			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}
			
			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0);

			pb.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}

			pb	
				.writeLong(0)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);

			pb
				.writeByte(1)
				.writeByte(2)
				.writeShort(0x43FA)
				.writeInt(0)
				.writeInt(-1)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeZeroBytes(22)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeByte(0)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeZeroBytes(47);

			pb
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(80)
				.writeInt(0);

			pb
				.writeByte(2)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(40)
				.writeInt(0);

			pb
				.writeByte(3)
				.writeByte(1)
				.writeZeroBytes(24)
				.writeShort(-1)
				.writeZeroBytes(120)
				.writeShort(0)
				.writeByte(1)
				.writeByte(1)
				.writeZeroBytes(22)
				.writeInt(-1)
				.writeZeroBytes(84)
				.writeInt(0);

			pb.finishPacket(0x90);

			return pb;
		}

		PacketBuilder dungeonLoadAck() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0x95);

			return pb;
		}

		PacketBuilder dungeonLoad(Player* player, int load) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(load)
				.finishPacket(0x96);

			return pb;

		}

		PacketBuilder unknown_0x3A0(Player* player) {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(1)
				.writeLong(0)
				.writeInt(0xD5)
				.writeLong(0)
				.writeByte(0)
				.writeInt(0xCD)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(player->getMaxHP())
				.writeInt(0x26E)
				.writeInt(0x301)
				.writeInt(0xB0)
				.writeInt(0x7C)
				.finishPacket(0x3A0);

			return pb;

		}

		PacketBuilder unknown_0x97() {

			PacketBuilder pb;
			pb.finishPacket(0x97);
			
			return pb;

		}

		PacketBuilder unknown_0x35A() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.writeByte(3)
				.writeLong(0)
				.writeLong(0)
				.finishPacket(0x35A);

			return pb;

		}

		PacketBuilder dungeonEnter(Player* player) {

			PacketBuilder pb;
			pb
				.writeByte(6)
				.writeShort(0)
				.writeShort(8)
				.writeShort(5)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(6)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeInt(0)
				.writeByte(0)
				.writeInt(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsString(player->getName())
				.writeInt(0x0A) // ?
				.writeElsString(player->getIP())
				.writeShort(0x1FC5)
				.writeElsString("79.110.88.169") // ???
				.writeShort(0x1FC5)
				.writeLong(0)
				.writeLong(1)
				.writeLong(0)
				.writeInt(0x538)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0x1B8)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeByte(player->getLevel())
				.writeInt(player->getMaxHP())
				.writeInt(player->getBaseAttack())
				.writeInt(player->getBaseMagicAttack())
				.writeInt(player->getBaseDef())
				.writeInt(player->getBaseMagicDef());

			pb.writeInt(player->getInv()->getEquipped());
			
			for (auto item : *player->getInv()->getInventory()) {

				if (item.second.isEquipped()) {

					pb
						.writeInt(item.second.getPosition())
						.writeInt(0)
						.writeInt(item.second.getUniqueID())
						.writeByte(9)
						.writeShort(item.second.getPosition())
						.writeInt(item.second.getItemID());
					if (item.second.isDecorative()) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(1);

					if (item.second.isDecorative()) {
						pb.writeShort(0);
					}
					else {
						pb.writeShort(item.second.getEndurance());
					}

					pb
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					if (item.second.isDecorative()) {
						pb
							.writeShort(1)
							.writeShort(7);
					}
					else {
						pb
							.writeShort(1)
							.writeShort(0);
					}

					if (item.second.getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item.second.getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);

				}

			}

			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0);

			pb
				.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}
			pb	
				.writeLong(0)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);

			pb
				.writeInt(0x10243FA)
				.writeLong(0)
				.writeShort(0)
				.writeByte(0)

				.writeInt(1) // quests
				.writeInt(0x2AF8)
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeInt(0)
				.writeByte(0)

				.writeLong(0)
				.writeLong(0)
				.writeByte(0)

				.writeInt(1)
				.writeInt(0x2AF8)
				.writeByte(0)
				.writeInt(0)

				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(-1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);

			for (int i = 1; i <= 7; i++) {
				pb
					.writeByte(i)
					.writeByte(1)
					.writeInt(0)
					.writeZeroBytes(20)
					.writeShort(0xFF)
					.writeZeroBytes(116)
					.writeByte(0)
					.writeShort(1)
					.writeByte(1)
					.writeZeroBytes(101)
					.writeInt(-1)
					.writeZeroBytes(30);

			}

			pb	
				.writeInt(player->getCurDungeon())
				.finishPacket(0x9A);

			return pb;

		}

		PacketBuilder unknown_0xB8() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xB8);

			return pb;

		}

		PacketBuilder unknown_0xB9() {

			unsigned char packet[2105] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x49, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x53, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x02, 0x81, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x49, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x47, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x8D, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x6A, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x43, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x3C, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x02, 0x7F, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xBF, 0x80, 0x00, 0x00, 0x02, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00};

			PacketBuilder pb;
			pb.writeBytes(packet, 2105).finishPacket(0xB9);

			return pb;

		}

		PacketBuilder unknown_0xBB() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xBB);
			
			return pb;

		}

		PacketBuilder unknown_0xBC(Player* player) {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeInt(player->getPlayerID())
				.finishPacket(0xBC);

			return pb;

		}

		PacketBuilder unknown_0xBD() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xBD);

			return pb;

		}

		PacketBuilder unknown_0xBF() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xBF);

			return pb;

		}

		PacketBuilder unknown_0xC0(int a1) {

			PacketBuilder pb;
			pb
				.writeByte(a1)
				.finishPacket(0xC0);

			return pb;

		}

		PacketBuilder unknown_0xC2() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xC2);

			return pb;

		}

		PacketBuilder unknown_0xC3(int a1) {

			PacketBuilder pb;
			pb
				.writeShort(a1)
				.finishPacket(0xC3);

			return pb;

		}

		PacketBuilder unknown_0xC5() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xC5);

			return pb;

		}

		PacketBuilder unknown_0xC6(int a1) {

			PacketBuilder pb;
			pb
				.writeByte(a1)
				.finishPacket(0xC6);

			return pb;

		}

		PacketBuilder unknown_0xA0(unsigned char a1, unsigned char a2) {

			PacketBuilder pb;
			pb
				.writeShort(0x469C)
				.writeByte(a1)
				.writeByte(a2)
				.finishPacket(0xA0);

			return pb;
		}

		PacketBuilder unknown_0xB2() {

			PacketBuilder pb;
			pb
				.writeInt(0)
				.finishPacket(0xB2);

			return pb;
		}

		PacketBuilder unknown_0xB3(int n1, int n2, int n3, int n4) {

			PacketBuilder pb;
			pb
				.writeInt(1)
				.writeInt(4)
				.writeInt(n1)
				.writeInt(n2)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(1)
				.writeByte(1)
				.writeInt(0)
				.writeByte(-1)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(n3)
				.writeInt(0x200)
				.writeLong(-1)
				.writeByte(-1)
				.writeInt(0)
				.writeInt(n4)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.finishPacket(0xB3);

			return pb;

		}



		PacketBuilder dungeonList(int reg, int dungeonID) {

			PacketBuilder pb;
	
			auto region = DungeonDataProvider::getRegion(reg);

			if (dungeonID == 0) { // for dungeon gates
				pb
					.writeInt(region->size() + 1)
					.writeInt(0)
					.writeInt(0)
					.writeShort(0);
			}
			else {
				pb.writeInt(region->size());
			}

			for (auto dungeon : *region) {

				pb
					.writeInt(dungeon.first)
					.writeInt(dungeon.first)
					.writeByte(0)
					.writeByte(dungeon.second);

			}

			pb.finishPacket(0x38A);

			return pb;

		}

		PacketBuilder dungeonEntryAck() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(0)
				.finishPacket(0x37D);

			return pb;
		}

		PacketBuilder dungeonStartCountdown(int toStart) {

			PacketBuilder pb;
			pb
				.writeShort(2)
				.writeByte(1)
				.writeInt(0)
				.writeByte(0)
				.writeByte(toStart)
				.writeByte(1)
				.finishPacket(0x38D);

			return pb;
		}

		PacketBuilder dungeonPartyData(Player* player, int dungeonID) {

			PacketBuilder pb;
			pb
				.writeShort(0x160)
				.writeByte(1)
				.writeShort(2)
				.writeByte(1)
				.writeByte(0)
				.writeInt(12)
				.writeInt(0)
				.writeShort(0)
				.writeByte(0)
				.writeInt(0x103CD690) // ??
				.writeShort(0xC720)
				.writeByte(0)
				.writeInt(0x58D594B2)
				.writeByte(0x20)
				.writeByte(0)
				.writeInt(0x58B304C8)
				.writeByte(5)
				.writeInt(0)
				.writeShort(0)
				.writeByte(4)
				.writeByte(1)
				.writeElsString(Config::serverIP)
				.writeShort(0x238D) // port
				.writeShort(0)
				.writeByte(0)
				.writeInt(-1)
				.writeShort(0)
				.writeByte(0x46) // level limit idk
				.writeShort(0x9C3E)
				.writeByte(0)
				.writeInt(0)
				.writeByte(0)
				.writeInt(dungeonID)
				.writeByte(1)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeByte(0) // added
				.writeInt(0)
				.writeShort(1)
				.writeInt(8)
				.writeShort(4)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(3)
				.writeInt(0)
				.writeInt(player->getAccountID())
				.writeLong(0)
				.writeByte(0)
				.writeInt(player->getPlayerID())
				.writeInt(player->getPlayerID())
				.writeByte((unsigned char)player->getUnitClass())
				.writeElsString(player->getName())
				.writeInt(0x0A) // ?
				.writeElsString(player->getIP())
				.writeShort(0x1FC5) // port
				.writeElsString("79.110.88.169")
				.writeShort(0x1FC5)
				.writeLong(0)
				.writeLong(1)
				.writeLong(0)
				.writeInt(0x7A)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0x67)
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeInt(0)
				.writeInt(Time::timestamp_now())
				.writeByte(player->getLevel())
				.writeInt(player->getMaxHP())
				.writeInt(player->getBaseAttack())
				.writeInt(player->getBaseMagicAttack())
				.writeInt(player->getBaseDef())
				.writeInt(player->getBaseMagicDef());

			pb.writeInt(player->getInv()->getEquipped()); // number of equipped equips
			
			for (auto item : *player->getInv()->getInventory()) {

				if (item.second.isEquipped()) {
					pb
						.writeInt(item.second.getPosition())
						.writeInt(0)
						.writeInt(item.second.getUniqueID())
						.writeByte(9)
						.writeShort(item.second.getPosition())
						.writeInt(item.second.getItemID());
					if (item.second.isDecorative()) {
						pb.writeByte(0);
					}
					else {
						pb.writeByte(1);
					}

					pb
						.writeInt(1);
					if (item.second.isDecorative()) {
						pb.writeShort(0);
					}
					else {
						pb.writeShort(item.second.getEndurance());
					}
					pb	
						.writeInt(0)
						.writeInt(0)
						.writeInt(0);

					// using masks?

					if (item.second.isDecorative()) {
						pb
							.writeShort(1)
							.writeShort(7);
					}
					else {
						pb
							.writeShort(1)
							.writeShort(0);
					}

					if (item.second.getExpiry() != "0000-00-00 00:00:00") {
						pb.writeElsString(item.second.getExpiry());
					}
					else {
						pb.writeInt(0);
					}

					pb.writeByte(0);
				}

			}
			
			for (int i = 0; i < 8; i++) {
				int skillid = player->getSkillInv()->getEquippedSkills()[i];
				pb
					.writeShort(skillid)
					.writeByte(player->getSkillInv()->getSkillLevel(skillid)); // skill level
			}

			pb
				.writeElsString("2000-01-01 00:00:00")
				.writeByte(0);

			pb.writeInt(player->getSkillInv()->getSkillInventory()->size()); // number of skills

			for (auto skill : *player->getSkillInv()->getSkillInventory()) {
				pb
					.writeShort(skill.first)
					.writeByte(skill.second);
			}
			
			pb
				.writeInt(0) // guild skills
				.writeInt(0)
				.writeByte(1)
				.writeByte(1)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0)
				.writeInt(0x10243FA)
				.writeInt(0)
				.writeByte(0)
				.writeInt(0)
				.writeShort(0);

			pb
				.writeInt(1) // quests
				.writeInt(0x2AF8) //questid
				.writeInt(1)
				.writeInt(0x2AF8)
				.writeInt(0)
				.writeByte(0)

				.writeInt(0)
				.writeInt(0) // guild name
				.writeByte(0)
				.writeInt(0)
				.writeInt(0)
				.writeInt(1) // quests
				.writeInt(0x2AF8)
				.writeByte(0)
				.writeInt(0);

			pb
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeShort(0)
				.writeInt(-1)
				.writeLong(0)
				.writeLong(0)
				.writeLong(0)
				.writeInt(0)
				.writeShort(0);
			

			for (int i = 1; i <= 7; i++) {
				pb
					.writeByte(i)
					.writeByte(1)
					.writeInt(0)
					.writeZeroBytes(20)
					.writeShort(-1)
					.writeZeroBytes(116)
					.writeByte(0)
					.writeShort(1)
					.writeByte(1)
					.writeZeroBytes(101)
					.writeInt(-1)
					.writeZeroBytes(30);

			}

			pb.writeInt(3);
			// exactly same as above
			for (int i = 0; i < 3; i++) {
				pb
					.writeByte(i)
					.writeByte(1)
					.writeInt(0)
					.writeZeroBytes(20)
					.writeShort(-1)
					.writeZeroBytes(116)
					.writeByte(0)
					.writeShort(1)
					.writeByte(1)
					.writeZeroBytes(101)
					.writeInt(-1)
					.writeZeroBytes(30);
			}

			pb
				.writeLong(0)
				.finishPacket(0x150);

			return pb;

		}

		PacketBuilder dungeonStageClearAck() {

			PacketBuilder pb;
			pb
				.writeLong(0)
				.writeLong(1)
				.finishPacket(0x471);

			return pb;

		}

	}


}